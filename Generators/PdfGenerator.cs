using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PdfSharp.Pdf;
using PdfSharp.Pdf.Advanced;
using GroupDocs.Parser;
using GroupDocs.Parser.Options;

namespace Tesseract_UI_Tools.Generators
{
    public class PdfGenerator : ATiffPagesGenerator
    {
        public static new string[] FORMATS = new string[] { "pdf" };

        public PdfGenerator(string FilePath) : base(FilePath){
            PdfDocument doc = PdfSharp.Pdf.IO.PdfReader.Open(FilePath);
            CanRun = doc.Info.Creator != PDF_TAG;
            doc.Close();
            FolderPath = "";
        }

        private string BmpFile(int i)
        {
            return $"{i}.bmp";
        }

        private string FolderPath;

        private void ReleaseBmpToTiff(int pgNumber, Stream stream)
        {
            using (Bitmap bit = new Bitmap(stream))
            {
                bit.Save(Path.Combine(FolderPath, TiffPage(pgNumber)));
            }
            stream.Close();
            File.Delete(Path.Combine(FolderPath, BmpFile(pgNumber)));
        }

        public override string[] GenerateTIFFs(string FolderPath, bool Overwrite = false, IProgress<float>? Progress = null, BackgroundWorker? worker = null)
        {
            this.FolderPath = FolderPath;
            if (!CanRun) throw new Exception("Attempting to run a File already generated by Tesseract UI Tools");

            List<string> result = new List<string>();
            using (Parser PDFParser = new Parser(FilePath))
            {
                int Pages = PDFParser.GetDocumentInfo().PageCount;
                PreviewOptions previewOptions = new PreviewOptions(pgNumber => {
                    if (Progress != null) Progress.Report((float)pgNumber / (float)Pages);
                    result.Add(Path.Combine(FolderPath, TiffPage(pgNumber)));
                    return File.Create(Path.Combine(FolderPath, BmpFile(pgNumber)));
                });
                previewOptions.PreviewFormat = PreviewOptions.PreviewFormats.BMP;
                previewOptions.Dpi = 300;
                previewOptions.ReleasePageStream = ReleaseBmpToTiff;
                PDFParser.GeneratePreview(previewOptions);
            }
            return result.ToArray();
        }
    }
}
