using System.ComponentModel;
using GroupDocs.Parser;
using GroupDocs.Parser.Options;

namespace Tesseract_UI_Tools.Generators
{
    public class PdfGenerator : ATiffPagesGenerator
    {
        public static new string[] FORMATS = new string[] { "pdf" };

        public PdfGenerator(string FilePath) : base(FilePath){
            using (Parser PDFParser = new Parser(FilePath))
            {
                CanRun = !PDFParser.GetMetadata().Any(o => o.Name == "application" && o.Value == PDF_TAG);
            }
            
        }

        private string BmpFile(int i)
        {
            return $"{i}.bmp";
        }

        public override string[] GenerateTIFFs(string FolderPath, bool Overwrite = false, IProgress<float>? Progress = null, BackgroundWorker? worker = null)
        {
            if (!CanRun) throw new Exception("Attempting to run a File already generated by Tesseract UI Tools");
            string[] Pages;
            using (Parser PDFParser = new Parser(FilePath))
            {
                int PagesNumber = PDFParser.GetDocumentInfo().PageCount;
                Pages = new string[PagesNumber];
                for(int i = 0; i < PagesNumber && (worker == null || !worker.CancellationPending); i++)
                {
                    if (Progress != null) Progress.Report((float)i / (float)PagesNumber);
                    string FullName = Path.Combine(FolderPath, TiffPage(i));
                    Pages[i] = FullName;
                    if (File.Exists(FullName) && !Overwrite) continue;

                    string TmpName = Path.Combine(FolderPath, BmpFile(i));
                    PreviewOptions previewOptions = new PreviewOptions(
                        _ => File.Create(TmpName),
                        (_, stream) =>
                        {
                            using (Bitmap bit = new Bitmap(stream))
                            {
                                bit.Save(FullName);
                            }
                            stream.Close();
                            File.Delete(TmpName);
                        });
                    previewOptions.PreviewFormat = PreviewOptions.PreviewFormats.BMP;
                    previewOptions.PageNumbers = new int[] { i+1 };
                    previewOptions.Dpi = 300;

                    PDFParser.GeneratePreview(previewOptions);
                }
            }
            return Pages;
        }
    }
}
